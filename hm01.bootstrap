Bootstrap: docker
From: ubuntu:18.04

%environment
    TZ=America/Chicago
    DEBIAN_FRONTEND=noninteractive
    export TZ=DEBIAN_FRONTEND
    export LC_ALL=C.UTF-8
    export LANG=C.UTF-8
    export RUSTUP_HOME=/opt/rustup
    export CARGO_HOME=/opt/cargo
    export POETRY_HOME=/opt/poetry

%post
    # set the time
    ln -fs /usr/share/zoneinfo/America/Chicago /etc/localtime

    # update first always
    ## force ipv4 for apt-get
    echo 'Acquire::ForceIPv4 "true";' | tee /etc/apt/apt.conf.d/99force-ipv4
    ## longer timeout
    echo 'Acquire::http::Timeout "300";' | tee /etc/apt/apt.conf.d/99timeout
    ## More retries
    echo 'Acquire::Retries "10";' | tee /etc/apt/apt.conf.d/99retries
    ## Limit download and disable parallel
    echo 'Acquire::http::Dl-Limit "2000";' | tee /etc/apt/apt.conf.d/99dl-limit
    apt-get -y update
    # and then software-properties-common mostly because of add ppa
    apt-get install -y software-properties-common
    apt-get install -y time

    # build tools
    apt-get install -y build-essential
    apt-get install -y gcc-8
    apt-get install -y g++-8
    # swap gcc and g++
    update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-8 800 --slave /usr/bin/g++ g++ /usr/bin/g++-8
    apt-get install -y cmake
    apt-get install -y autoconf
    apt-get install -y automake
    apt-get install -y pkg-config
    apt-get install -y gdb
    apt-get install -y valgrind
    apt-get install -y tar
    apt-get install -y wget
    apt-get install -y git
    apt-get install -y default-jre
    apt-get install -y default-jdk
    apt-get install -y mpi-default-bin
    apt-get install -y mpi-default-dev
    apt-get install -y bison
    apt-get install -y flex
    apt-get install -y libtool
    apt-get install -y autotools-dev
    apt-get install -y libffi-dev
    apt-get install -y libssl1.0.0
    apt-get install -y libssl-dev
    apt-get install -y curl
    apt-get clean


    mkdir /opt/rustup
    mkdir /opt/cargo
    export RUSTUP_HOME=/opt/rustup
    export CARGO_HOME=/opt/cargo
    curl https://sh.rustup.rs -sSf | sh -s -- -y

    # CRAN repo
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9
    add-apt-repository -y 'deb https://cloud.r-project.org/bin/linux/ubuntu bionic-cran40/'
    apt-get -y update
    apt-get install -y r-base
    echo "install.packages(\"sirt\", repos=\"https://cran.rstudio.com\")" | R --no-save
    apt-get clean

    # for python3.9
    add-apt-repository ppa:deadsnakes/ppa
    apt-get update

    # python packages
    # apt-get install -y python-pip
    # apt-get install -y python-tk
    # apt-get install -y libpython2.7

    # apt-get install -y python3
    # apt-get install -y python3-tk
    # apt-get install -y python3-venv python3-pip
    # apt-get install -y python3-sphinx
    # apt-get clean

    apt-get install -y python3.9
    apt-get install -y python3.9-venv
    apt-get install -y python3.9-dev
    apt-get install -y python3.9-distutils

    mkdir /opt/pip
    cd /opt/pip
    curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
    python3.9 get-pip.py

    # pip install virtualenv
    python3.9 -m pip install virtualenv

    # pip install click
    python3.9 -m pip install click

    python3.9 -m pip install sphinx-click

    python3.9 -m pip install maturin

    # poetry
    mkdir /opt/poetry
    export POETRY_HOME=/opt/poetry
    curl -sSL https://install.python-poetry.org | python3.9 -


%test
    echo "Testing Packages"

    echo -n "MAFFT was installed to: "
    which mafft || echo "ERROR: Please check the installation for MAFFT"

    echo -n "ClustalOmega was installed to: "
    which clustalo || echo "ERROR: Please check the installation for ClustalOmega"

    echo -n "RAxML was installed to: "
    which raxmlHPC || echo "ERROR: Please check the installation for RAxML"

    echo -n "PhyML was installed to: "
    which phyml || echo "ERROR: Please check the installation for PhyML"

    echo -n "IQTree was installed to: "
    which iqtree || echo "ERROR: Please check the installation for IQTree"

    echo -n "FastTree was installed to: "
    which fasttree || echo "ERROR: Please check the installation for FastTree"

    echo -n "SimPhy was installed to: "
    which simphy || echo "ERROR: Please check the installation for SimPhy"

    echo -n "PAUP* was installed to: "
    which paup || echo "ERROR: Please check the installation for PAUP*"

    echo -n "ASTRID was installed to: "
    which astrid || echo "ERROR: Please check the installation for ASTRID"

    echo -n "RAxML-ng was installed to: "
    which raxmlng || echo "ERROR: Please check the installation for RAxML-ng"

    echo -n "INDELible was installed to: "
    which indelible || echo "ERROR: Please check the installation for INDELible"

    echo -n "mcl was installed to: "
    which mcl || echo "ERROR: Please check the installation for mcl"

    echo -n "epa-ng was installed to: "
    which epa-ng || echo "ERROR: Please check the installation for epa-ng"

    echo -n "gappa was installed to: "
    which gappa || echo "ERROR: Please check the installation for gappa"

    echo -n "TreeMerge was installed to: "
    (test -f /opt/treemerge/python/treemerge.py && echo "/opt/treemerge/python/treemerge.py" )|| echo "ERROR: Please check the installation for TreeMerge"

    echo -n "GTM was installed to: "
    (test -f /opt/GTM/gtm.py && echo "/opt/GTM/gtm.py" )|| echo "ERROR: Please check the installation for GTM"

    echo -n "Constrained-inc was installed to: "
    which constraint_inc || echo "ERROR: Please check the installation for Constrained-inc"

    echo -n "Statistical Binning was installed to: "
    (test -f /opt/binning/remove_edges_from_tree.py && echo "/opt/binning" )|| echo "ERROR: Please check the installation for Statistical Binning"

    # echo -n "Erin's Tools were installed to: "
    # (test -f /opt/erin_tools/compare_trees.py && echo "/opt/erin_tools/compare_trees.py" )|| echo "ERROR: Please check the installation for Erin's Tools"

    echo -n "Checking Java version: "
    java -version || echo "ERROR: Please check the installation for Default Java Runtime"
    javac -version || echo "ERROR: Please check the installation for OpenJDK"

    echo -n "Checking Python version: "
    python --version || echo "ERROR: Please check the installation for Python 2"
    python3 --version || echo "ERROR: Please check the installation for Python 3"

    echo -n "Checking Click: "
    (python -c "import click" && echo "") || echo "ERROR: Please check the installation for click in python 2"
    (python3 -c "import click" && echo "") || echo "ERROR: Please check the installation for click in python 3"

%labels
    Author MinhyukPark
